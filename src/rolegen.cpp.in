// Copyright (c) 2010-2021 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#include <fstream>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <glib.h>
#include "rolegen.h"

#define DYN_PUBROLES_PATH	"@WEBOS_INSTALL_SYSBUS_DYNPUBROLESDIR@"
#define DYN_PRVROLES_PATH	"@WEBOS_INSTALL_SYSBUS_DYNPRVROLESDIR@"
#define NDK_TEMPLATE_PATH	"@WEBOS_INSTALL_DATADIR@/rolegen/templates/NDK"
#define TRITON_TEMPLATE_PATH 	"@WEBOS_INSTALL_DATADIR@/rolegen/templates/Triton"
#define TRITON_EXE_PATH		"js"

using namespace std;

#if 0
/* isPrivilegedAppId() used by tritonGenerateRole().
 * Re-enable if temporary fix resolved.
 */
static bool isPrivilegedAppId(const char *appId)
{
	if (appId == NULL || appId[0] == 0)
		return false;

	// hard code known exceptions here
	if (strncmp(appId, "com.palm.", 9) == 0)
		return true;

	return false;
}
#endif

static bool fexists(string filename)
{
  ifstream ifile(filename.c_str());
  return !(ifile.fail());
}

static void checkDirStructure()
{
	(void) g_mkdir_with_parents(DYN_PUBROLES_PATH, 0700);
	(void) g_mkdir_with_parents(DYN_PRVROLES_PATH, 0700);
}

void roleGenerate(string templatePath, string destinationPath, string id, string executablePath)
{
	string line;
	size_t n;
	static const string ID_TAG = "XXXIDXXX";
	static const string PATH_TAG = "XXXEXEPATHXXX";

	//cout << id << ':' << executablePath << ':' <<templatePath << ':'  << destinationPath << endl;

	if (fexists(destinationPath)) return;

    ifstream myfile (templatePath.c_str());
	ofstream newfile (destinationPath.c_str());	

    if (myfile.is_open() && newfile.is_open())
    {
		while (! myfile.eof() )
		{
			getline (myfile,line);
			while ((n=line.find(ID_TAG)) != string::npos) {
				line.replace(n, ID_TAG.length(), id);
			}
			while ((n=line.find(PATH_TAG)) != string::npos) {
				line.replace(n, PATH_TAG.length(), executablePath);
			}
			newfile << line << endl;
		}
		newfile.close();
		myfile.close();
	}

	// this is temporary until LS has a real API or mechanism to pick up changes
	const gchar *argv[] = {"@WEBOS_INSTALL_SBINDIR@/ls-control", "scan-volatile-dirs", NULL};
	GSpawnFlags flags = (GSpawnFlags)(G_SPAWN_STDERR_TO_DEV_NULL);
	g_spawn_sync(NULL, (gchar **)argv, NULL, flags, NULL, NULL, NULL, NULL, NULL, NULL);
}

void ndkGenerateRole(string id, string executablePath)
{
	checkDirStructure();

	string templatePath;
	string destinationPath;

	templatePath = NDK_TEMPLATE_PATH;
	destinationPath = DYN_PUBROLES_PATH;
	destinationPath += "/" + id + ".json";

	roleGenerate(templatePath+".pub", destinationPath, id, executablePath);

	templatePath = NDK_TEMPLATE_PATH;
	destinationPath = DYN_PRVROLES_PATH;
	destinationPath += "/" + id + ".json";

	roleGenerate(templatePath+".prv", destinationPath, id, executablePath);
}

// deprecated
void pdkGenerateRole(string id, string executablePath)
{
	ndkGenerateRole(id, executablePath);
}

void tritonGenerateRole(string id)
{
	checkDirStructure();

	string templatePath;
	string destinationPath;

	templatePath = TRITON_TEMPLATE_PATH;
	destinationPath = DYN_PUBROLES_PATH;
	destinationPath += "/" + id + ".json";

	roleGenerate(templatePath+".pub", destinationPath, id, TRITON_EXE_PATH);

	// temporary fix for blowfish. this should really vary
	// template based on appID giving a limited version to
	// non com.palm ids
	//if (isPrivilegedAppId(id.c_str())) {
		templatePath = TRITON_TEMPLATE_PATH;
		destinationPath = DYN_PRVROLES_PATH;
		destinationPath += "/" + id + ".json";

		roleGenerate(templatePath+".prv", destinationPath, id, TRITON_EXE_PATH);
	// }
}
